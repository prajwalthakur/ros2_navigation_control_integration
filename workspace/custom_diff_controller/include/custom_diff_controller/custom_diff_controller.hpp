#ifndef CUSTOM_DIFF_CONTROLLER__CUSTOM_DIFF_CONTROLLER_HPP_
#define CUSTOM_DIFF_CONTROLLER__CUSTOM_DIFF_CONTROLLER_HPP_

#include <chrono>  // functions related to time
#include <cmath> // functions related to math defined in c
#include <memory>  //memory management utilities
#include <queue>
#include <string>
#include <vector>
#include <utility>
#include "controller_interface/controller_interface.hpp"
#include "hardware_interface/handle.hpp"
#include "hardware_interface/types/hardware_interface_type_values.hpp"
#include "lifecycle_msgs/msg/state.hpp"
#include "rclcpp/logging.hpp"
#include "tf2/LinearMath/Quaternion.hpp"


#include "custom_diff_controller/odometry.hpp"
#include "custom_diff_controller/speed_limiter.hpp"
#include "custom_diff_controller/visibility_control.h"

#include "geometry_msgs/msg/twist.hpp"
#include "geometry_msgs/msg/twist_stamped.hpp"
#include "nav_msgs/msg/odometry.hpp"
#include "tf2_msgs/msg/tf_message.hpp"
#include "rclcpp/rclcpp.hpp"
#include "rclcpp_lifecycle/state.hpp"
#include "realtime_tools/realtime_box.hpp"
#include "realtime_tools/realtime_publisher.hpp"
#include "realtime_tools/realtime_buffer.hpp"



// auto-generated by generate_parameter_library
#include "custom_diff_controller/custom_diff_controller_parameters.hpp"

namespace custom_diff_controller
{

class CustomDiffController : public controller_interface:: ControllerInterface
{
    using Twist = geometry_msgs::msg::TwistStamped;
    public:
        CUSTOM_DIFF_CONTROLLER_PUBLIC
        CustomDiffController();
        CUSTOM_DIFF_CONTROLLER_PUBLIC
        controller_interface::InterfaceConfiguration command_interface_configuration() const override;

        CUSTOM_DIFF_CONTROLLER_PUBLIC
        controller_interface::InterfaceConfiguration state_interface_configuration() const override;

        // CUSTOM_DIFF_CONTROLLER_PUBLIC
        // controller_interface::InterfaceConfiguration state_interface_configuration() const override;

        CUSTOM_DIFF_CONTROLLER_PUBLIC
        controller_interface::return_type update(const rclcpp::Time & time, const rclcpp::Duration & period) override;

        CUSTOM_DIFF_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_init() override;

        CUSTOM_DIFF_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_configure(
        const rclcpp_lifecycle::State & previous_state) override;

        CUSTOM_DIFF_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_activate(
        const rclcpp_lifecycle::State & previous_state) override;


        CUSTOM_DIFF_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_deactivate(
        const rclcpp_lifecycle::State & previous_state
        ) override;

        CUSTOM_DIFF_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_cleanup(
        const rclcpp_lifecycle::State & previous_state) override;

        CUSTOM_DIFF_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_error(
        const rclcpp_lifecycle::State & previous_state) override;


        //virtual ~CustomDiffController();
        // Parameters from ROS for diff_drive_controller

    protected:
        struct WheelHandle
        {
            std::reference_wrapper<const hardware_interface::LoanedStateInterface> feedback;
            std::reference_wrapper<hardware_interface::LoanedCommandInterface> velocity;
        };

        const char * feedback_type() const;
        controller_interface::CallbackReturn configure_side(
            const std::string& side, const std::vector<std::string> & wheel_names,
            std::vector<WheelHandle>& registered_handle);
        std::vector<WheelHandle> registered_left_wheel_handles_;
        std::vector<WheelHandle> registered_right_wheel_handles_;
        
        std::shared_ptr<ParamListener> param_listener_;
        Params params_;

        Odometry odometry_;

        // Timeout to consider cmd_vel commands old
        //std::chrono::milliseconds cmd_vel_timeout_{500}; //500 ms
        rclcpp::Duration cmd_vel_timeout_ = rclcpp::Duration::from_seconds(0.5);
        
        rclcpp::Publisher<nav_msgs::msg::Odometry>::SharedPtr odometry_publisher_ = nullptr;
        std::shared_ptr<realtime_tools::RealtimePublisher<nav_msgs::msg::Odometry>> realtime_odometry_publisher_ = nullptr;

        rclcpp::Publisher<tf2_msgs::msg::TFMessage>::SharedPtr odometry_transform_publisher_ = nullptr;
        
        std::shared_ptr<realtime_tools::RealtimePublisher<tf2_msgs::msg::TFMessage>> realtime_odometry_transform_publisher_ = nullptr;

        bool subscriber_is_active_ = false;
        int wheels_per_side_ = 0;
        
        rclcpp::Subscription<Twist>::SharedPtr velocity_command_subscriber_ = nullptr;
        
        rclcpp::Subscription<geometry_msgs::msg::Twist>::SharedPtr velocity_command_unstamped_subscriber_ = nullptr;

        //realtime_tools::RealtimeBox<Std::shared_ptr<Twist>> received_velocity_msg_ptr_{nullptr};
        realtime_tools::RealtimeBuffer<std::shared_ptr<Twist>> received_velocity_msg_ptr_{nullptr};
        std::queue<Twist> previous_commands_; // last two commands;

        // speed limiters

        SpeedLimiter limiter_linear_;
        SpeedLimiter limiter_angular_;

        bool publish_limited_velocity_ = false;
        rclcpp::Publisher<Twist>::SharedPtr limited_velocity_publisher_ = nullptr;
        std::shared_ptr<realtime_tools::RealtimePublisher<Twist>> realtime_limited_velocity_publisher_ = nullptr;

        rclcpp::Time previous_update_timestamp_{0,0,RCL_CLOCK_UNINITIALIZED};

        // publish rate limiter
        double publish_rate_ = 50.0;
        rclcpp::Duration publish_period_ = rclcpp::Duration::from_nanoseconds(0);
        rclcpp::Time previous_publish_timestamp_{0,0,RCL_CLOCK_UNINITIALIZED};

        bool is_halted  = false;
        bool use_stamped_vel_ = true;

        bool reset();
        void reset_buffers();
        void halt();
};

}  // namespace custom_diff_controller

#endif  // CUSTOM_DIFF_CONTROLLER__CUSTOM_DIFF_CONTROLLER_HPP_
